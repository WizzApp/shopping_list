# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Cloudflare Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main", "feature/*", "bugfix/*"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install packages
        run: npm ci
      - name: Build
        run: npm run build
      - name: Publish to Cloudflare Pages
        id: deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy dist --project-name=shopping-list
      - uses: actions/github-script@v7
        id: createDeployment
        with:
          script: |
            const ref = `${{ github.head_ref }}` || `${{ github.ref_name }}` || context.ref;
            const result = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: ref,
              auto_merge: false,
              required_contexts: [],
              environment: context.ref === 'refs/heads/main' ? 'Production' : 'Preview',
              production_environment: context.ref === 'refs/heads/main'
            })
            return result.data.id
      - uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: `${{ steps.createDeployment.outputs.result }}`,
              environment: context.ref === 'refs/heads/main' ? 'Production' : 'Preview',
              environment_url: `${{ steps.deploy.outputs.deployment-url }}`,
              state: 'success',
              auto_inactive: false
            })
